[include mainsail.cfg]
[include KAMP_Settings.cfg]
[include macros/*.cfg]

[virtual_sdcard]
path: /home/xoriso/printer_data/gcodes
on_error_gcode: CANCEL_PRINT

# This file contains common pin mappings for the 2018 Creality
# Ender 3. To use this config, the firmware should be compiled for the
# AVR atmega1284p.

# Note, a number of Melzi boards are shipped with a bootloader that
# requires the following command to flash the board:
#  avrdude -p atmega1284p -c arduino -b 57600 -P /dev/ttyUSB0 -U out/klipper.elf.hex
# If the above command does not work and "make flash" does not work
# then one may need to flash a bootloader to the board - see the
# Klipper docs/Bootloaders.md file for more information.

# See docs/Config_Reference.md for a of parameters.

# This file contains common pin mappings for the BIGTREETECH SKR mini
# E3 v3.0. To use this config, the firmware should be compiled for the
# STM32G0B1 with a "8KiB bootloader" and USB communication.

# The "make flash" command does not work on the SKR mini E3. Instead,
# after running "make", copy the generated "out/klipper.bin" file to a
# file named "firmware.bin" on an SD card and then restart the SKR
# mini E3 with that SD card.


# The rpi microcontroller is used as secondary.
# Typically, both the X and Y axes
# are connected to the main micro-controller. The rpi microcontroller is used
# on non time-critical functions such as enclosure sensors, additional fan or
# light sources

#[mcu host]
#serial: /tmp/klipper_host_mcu



## ejemplo de valores input shaper para Y según gráfica anterior
[exclude_object]

[input_shaper]


#[cartographer]
#serial: /dev/serial/by-id/usb-Cartographer_614e_110009001443565537353020-if00
#   Path to the serial port for the Cartographer device. Typically has the form
#   /dev/serial/by-id/usb-cartographer_cartographer_...
#   
#   If you are using the CAN Bus version, replace serial: with canbus_uuid: and add the UUID.
#   Example: canbus_uuid: 1283as878a9sd
#
#speed: 40.
#   Z probing dive speed.
#lift_speed: 5.
#   Z probing lift speed.
#backlash_comp: 0.5
#   Backlash compensation distance for removing Z backlash before measuring
#   the sensor response.
#x_offset: 0
#   X offset of cartographer from the nozzle.
#y_offset: 21.1
#y_offset: 25
#   Y offset of cartographer from the nozzle.
#trigger_distance: 2.
#   cartographer trigger distance for homing.
#trigger_dive_threshold: 1.5
#   Threshold for range vs dive mode probing. Beyond `trigger_distance +
#   trigger_dive_threshold` a dive will be used.
#trigger_hysteresis: 0.006
#   Hysteresis on trigger threshold for untriggering, as a percentage of the
#   trigger threshold.
#cal_nozzle_z: 0.1
#   Expected nozzle offset after completing manual Z offset calibration.
#cal_floor: 0.1
#   Minimum z bound on sensor response measurement.
#cal_ceil:5.
#   Maximum z bound on sensor response measurement.
#cal_speed: 1.0
#   Speed while measuring response curve.
#cal_move_speed: 10.
#   Speed while moving to position for response curve measurement.
#default_model_name: default
#   Name of default cartographer model to load.
#mesh_main_direction: x
#   Primary travel direction during mesh measurement.
#mesh_overscan: -1
#   Distance to use for direction changes at mesh line ends. Omit this setting
#   and a default will be calculated from line spacing and available travel.
#mesh_cluster_size: 1
#   Radius of mesh grid point clusters.
#mesh_runs: 2
#   Number of passes to make during mesh scan.
[mcu rpi]
serial: /tmp/klipper_host_mcu

[adxl345]
cs_pin: rpi:None

#[resonance_tester]
#accel_chip: adxl345
#probe_points:
#    100, 100, 20  # an example
    
#[lis2dw]
#cs_pin: cartographer:PA3
#spi_bus: spi1

[resonance_tester]
accel_chip: adxl345
probe_points:
    125, 125, 20

[safe_z_home]
home_xy_position: 118,118
# Example home_xy_position: 175,175 - This would be for a 350 * 350mm bed. 
z_hop: 10

[bed_mesh]
speed: 120
horizontal_move_z: 5
mesh_min: 15, 30
#mesh_max: 215, 333
mesh_max: 215, 223

probe_count: 10, 4
algorithm: bicubic

[respond] #responde con un mensaje en la consola

[stepper_x]
step_pin: PB13
dir_pin: !PB12
enable_pin: !PB14
microsteps: 16
rotation_distance: 40
endstop_pin: ^PC0
position_endstop: 0
position_min: 0
position_max: 235
homing_speed: 50

[tmc2209 stepper_x]
uart_pin: PC11
tx_pin: PC10
uart_address: 0
run_current: 0.580
stealthchop_threshold: 999999


[stepper_y]
step_pin: PB10
dir_pin: !PB2
enable_pin: !PB11
microsteps: 16
rotation_distance: 40
endstop_pin: ^PC1
position_max: 497
homing_speed: 50
position_min: -93
position_endstop: -93
#position_min: -40
#position_endstop: -40 


# config with long bed
# position_min: -40
# position_endstop: -40 

# config without long bed 
# position_min: -90
# position_endstop: -90 
# 55

[tmc2209 stepper_y]
uart_pin: PC11
tx_pin: PC10
uart_address: 2
run_current: 0.580
stealthchop_threshold: 999999

[BDsensor] 
# Don't use aliases for the board pins
sda_pin: PB8 # example of connecting to main board Creality V4.2.7
scl_pin: PB5
#scl_pin:MKS_THR:gpio20 # example of connecting to CAN module like MKS THR42 
#sda_pin:MKS_THR:gpio11 
#scl_pin = host:gpio17 # example of connecting to GPIO on RaspberryPi
#sda_pin = host:gpio27
delay: 20 # 20us per pulse, this value should be >=18 but must be below 30
z_offset:0 # this `z_offset` must be set to 0. 
z_adjust:0.0 # z axis adjustment, replace the z_offset function. within -0.3 to 0.3mm
x_offset: -34
y_offset: 0
no_stop_probe: # fast probe that the toolhead will not stop at the probe point,disable it by commenting out.
position_endstop: 0.8 #the Z axis will be triggered after it measured the distance is below this value(mm) while homing z, recommend value is 0.5~1.0
#speed:0.8 # this speed only works for the z tilt and PROBE_ACCURACY command.

[stepper_z]
step_pin: PB0
dir_pin: PC5
enable_pin: !PB1
microsteps: 16
rotation_distance: 8
#endstop_pin: ^PC2
#position_endstop: 0.0

endstop_pin: probe:z_virtual_endstop # use cartographer as virtual endstop
homing_retract_dist: 0 # cartographer needs this to be set to 0

position_max: 250

#[safe_z_home]
#home_xy_position: 110,110
# Example home_xy_position: 175,175 - This would be for a 350 * 350mm bed. 
#z_hop: 10

[tmc2209 stepper_z]
uart_pin: PC11
tx_pin: PC10
uart_address: 1
run_current: 0.580
stealthchop_threshold: 999999


[extruder]
min_extrude_temp: 190
max_extrude_only_distance: 101.0
step_pin: PB3
dir_pin: PB4
enable_pin: !PD1
microsteps: 16
#rotation_distance: 33.683
rotation_distance: 28.45
full_steps_per_rotation: 200 #1.8deg Motor
gear_ratio: 50:8 #for sherpa mini 8t motor
nozzle_diameter: 0.400
filament_diameter: 1.750
heater_pin: PC8
#sensor_type: EPCOS 100K B57560G104F
sensor_type: ATC Semitec 104NT-4-R025H42G
sensor_pin: PA0
control: pid
# tuned for stock hardware with 200 degree Celsius target
pid_Kp: 21.527
pid_Ki: 1.063
pid_Kd: 108.982
min_temp: 0
max_temp: 300
#pressure_advance: 0.56
pressure_advance: 0.4


[tmc2209 extruder]
uart_pin: PC11
tx_pin: PC10
uart_address: 3
run_current: 0.33 #before: 0.25
#hold_current: 0.200

stealthchop_threshold: 999999


[filament_switch_sensor filament sensor]
pause_on_runout: true
#   When set to True, a PAUSE will execute immediately after a runout
#   is detected. Note that if pause_on_runout is False and the
#   runout_gcode is omitted then runout detection is disabled. Default
#   is True.
runout_gcode:
    M117 Runout detected
#   A list of G-Code commands to execute after a filament runout is
#   detected. See docs/Command_Templates.md for G-Code format. If
#   pause_on_runout is set to True this G-Code will run after the
#   PAUSE is complete. The default is not to run any G-Code commands.
insert_gcode:
    M117 insert detected
#   A list of G-Code commands to execute after a filament insert is
#   detected. See docs/Command_Templates.md for G-Code format. The
#   default is not to run any G-Code commands, which disables insert
#   detection.
#event_delay: 3.0
#   The minimum amount of time in seconds to delay between events.
#   Events triggered during this time period will be silently
#   ignored. The default is 3 seconds.
#pause_delay: 0.5
#   The amount of time to delay, in seconds, between the pause command
#   dispatch and execution of the runout_gcode. It may be useful to
#   increase this delay if OctoPrint exhibits strange pause behavior.
#   Default is 0.5 seconds.
switch_pin: !PC2
#   The pin on which the switch is connected. This parameter must be
#   provided.

[heater_bed]
heater_pin: PC9
sensor_type: ATC Semitec 104GT-2
sensor_pin: PC4
control: pid
pid_Kp: 54.027
pid_Ki: 0.770
pid_Kd: 948.182
min_temp: 0
max_temp: 130

[fan]
pin: PC7

[heater_fan heatbreak_cooling_fan]
pin: PC6

[heater_fan controller_fan]
pin: PB15


[mcu]
# serial para placa OG
# serial: /dev/serial/by-id/usb-FTDI_FT232R_USB_UART_AC00AOYC-if00-port0
# placa skr mini e3
serial: /dev/serial/by-id/usb-Klipper_stm32g0b1xx_210046000550414235393120-if00


[printer]
kinematics: cartesian
max_velocity: 300
max_accel: 3000
max_z_velocity: 5
max_z_accel: 100

[bed_screws]
screw1: 30.5, 37
screw2: 30.5, 207
screw3: 204.5, 207
screw4: 204.5, 37


[board_pins]
aliases:
    # EXP1 header
    EXP1_1=PB5,  EXP1_3=PA9,   EXP1_5=PA10, EXP1_7=PB8, EXP1_9=<GND>,
    EXP1_2=PA15, EXP1_4=<RST>, EXP1_6=PB9,  EXP1_8=PD6, EXP1_10=<5V>


[gcode_macro SHAPER_Y_AXIS]
description: input shaper meassure for y axis, use adxl345 on resonance_tester first!
gcode: 
      SHAPER_CALIBRATE AXIS=Y
      
[gcode_macro SHAPER_X_AXIS]
description: input shaper meassure for y axis, use lis2dw on resonance_tester first!
gcode: 
      SHAPER_CALIBRATE AXIS=Y

      
[gcode_macro START_PRINT]

gcode:
 #   {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
 #   {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(210)|float %}
    {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(210)|float %}
    # Start bed heating
    G28
    M140 S{BED_TEMP}
    # Use absolute coordinates
    G90
    # Home the printer
    
    # Move the nozzle near the bed
    BED_MESH_CALIBRATE
    Smart_Park
   # G1 Z5 F3000
    # Move the nozzle very close to the bed
   # G1 Z0.15 F300
    # Wait for bed to reach temperature
    M190 S{BED_TEMP}
    # Set and wait for nozzle to reach temperature
    M109 S{EXTRUDER_TEMP}
    CACA_MOD

[gcode_macro END_PRINT]
 gcode:
     Turn off bed, extruder, and fan
     M140 S0
     M104 S0
     M106 S0
    # Move nozzle away from print while retracting
     G91
     G1 X-2 Y-2 E-3 F300
    # Raise nozzle by 10mm
     G1 Z10 F3000
     G90
    # Disable steppers
     M84

[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
    # Parameters
    {% set z = params.Z|default(10)|int %}                                                   ; z hop amount

    {% if printer['pause_resume'].is_paused|int == 0 %}
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}                              ; set z hop variable for reference in resume macro
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}    ; set hotend temp variable for reference in resume macro

#        SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0                                  ; disable filament sensor
        SAVE_GCODE_STATE NAME=PAUSE                                                          ; save current print position for resume
        BASE_PAUSE                                                                           ; pause print
        {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}       ; check that zhop doesn't exceed z max
            G91                                                                              ; relative positioning
            G1 Z{z} F900                                                                     ; raise Z up by z hop amount
        {% else %}
            { action_respond_info("Pause zhop exceeds maximum Z height.") }                  ; if z max is exceeded, show message and set zhop value for resume to 0
            SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
        {% endif %}
        G90                                                                                  ; absolute positioning
        G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F6000   ; park toolhead at front center
        SAVE_GCODE_STATE NAME=PAUSEPARK                                                      ; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error)
        M104 S0                                                                              ; turn off hotend
        SET_IDLE_TIMEOUT TIMEOUT=43200                                                       ; set timeout to 12 hours
    {% endif %}

[gcode_macro RESUME]
rename_existing: BASE_RESUME
variable_zhop: 0
variable_etemp: 0
gcode:
    # Parameters
    {% set e = params.E|default(2.5)|int %}                                          ; hotend prime amount (in mm)

    {% if printer['pause_resume'].is_paused|int == 1 %}
#        SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1                          ; enable filament sensor
        #INITIAL_RGB                                                                    ; reset LCD color
        SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}  ; set timeout back to configured value
        {% if etemp > 0 %}
            M109 S{etemp|int}                                                        ; wait for hotend to heat back up
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100                     ; go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)
        G91                                                                          ; relative positioning
        M83                                                                          ; relative extruder positioning
        {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}
            G1 Z{zhop * -1} E{e} F900                                                ; prime nozzle by E, lower Z back down
        {% else %}
            G1 Z{zhop * -1} F900                                                     ; lower Z back down without priming (just in case we are testing the macro with cold hotend)
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60                          ; restore position
        BASE_RESUME                                                                  ; resume print
    {% endif %}
    
[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
    SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout} ; set timeout back to configured value
    CLEAR_PAUSE
    SDCARD_RESET_FILE
    PRINT_END
    BASE_CANCEL_PRINT
    
[gcode_macro M600]
gcode:
    #LCDRGB R=0 G=1 B=0  ; Turn LCD green
    PAUSE                ; Pause


# See the sample-lcd.cfg file for definitions of common LCD displays.

# The print bed can move so far to the front, that the nozzle can reach the
# plastic cover of the print bed heater cable (only when the bed is moved by
# hand). By homing the Y axis before the X axis, it is ensured the nozzle will
# not melt through the plastic part.
# BEWARE: You will lose the ability to home axes individually. The printer will
# always home all axes for every G28 command.
#[homing_override]
#gcode:
# G28 Y0
# G28 X0
# G28 Z0

#*# <---------------------- SAVE_CONFIG ---------------------->
#*# DO NOT EDIT THIS BLOCK OR BELOW. The contents are auto-generated.
#*#
#*# [stepper_z]
#*# position_endstop = -0.200
#*#
#*# [cartographer model default]
#*# model_coef = 1.4096542462146286,
#*# 	  1.8498984163119372,
#*# 	  0.7420191083255657,
#*# 	  0.14208771931136316,
#*# 	  0.5130790172646245,
#*# 	  1.0268637038192472,
#*# 	  -0.5519204802150137,
#*# 	  -1.1710986693310155,
#*# 	  0.4362000022035515,
#*# 	  0.6039814258434895
#*# model_domain = 3.251759236070826e-07,3.374170685304603e-07
#*# model_range = 0.100000,5.000000
#*# model_temp = 33.082457
#*# model_offset = -0.05000
#*#
#*# [bed_mesh default]
#*# version = 1
#*# points =
#*# 	  0.023921, 0.029226, 0.015991
#*# 	  0.040236, 0.037089, 0.027272
#*# 	  0.040702, 0.040569, 0.032880
#*# x_count = 3
#*# y_count = 3
#*# mesh_x_pps = 2
#*# mesh_y_pps = 2
#*# algo = bicubic
#*# tension = 0.2
#*# min_x = 99.966
#*# max_x = 132.852
#*# min_y = 110.171
#*# max_y = 123.5
#*#
#*# [input_shaper]
#*# shaper_type_x = zv
#*# shaper_freq_x = 26.0
#*# shaper_type_y = mzv
#*# shaper_freq_y = 26.6
